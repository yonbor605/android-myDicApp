apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyyMMddHHmm")
}

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    //配置应用的签名信息
    signingConfigs {
        release {
            storeFile file('../yonbor.jks')
            keyAlias 'yonbor'
            keyPassword 'android'
            storePassword 'android'
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        multiDexEnabled = true //方法数超过64k
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        ndk {
            abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'x86', 'x86_64'
        }

        //************************统一配置****************************************//
//        buildConfigField 'boolean', 'isSupportVisitor', 'true'//是否支持游客
//        buildConfigField 'boolean', 'isChangePhone', 'true'//是否可以修改手机号
    }

    dataBinding {
        enabled true
    }

    //apk重命名
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    fileName = "${project.getName()}-${variant.flavorName}_v${variant.versionName}.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "${project.getName()}-${variant.flavorName}-${variant.buildType.name}_v${variant.versionName}-${releaseTime()}.apk"
                }
                outputFileName = fileName
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField 'boolean', 'IS_LOG', 'true'
            buildConfigField 'boolean', 'IS_DEBUG', 'true'

            debuggable true
            // 是否zip对齐
            zipAlignEnabled true
            // 是否混淆
            minifyEnabled false
            // 移除无用的资源文件,这个东西依赖于minifyEnabled，所以minifyEnabled也要为true才行
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField 'boolean', 'IS_LOG', 'false'
            buildConfigField 'boolean', 'IS_DEBUG', 'false'

            debuggable false
            // 是否zip对齐
            zipAlignEnabled true
            // 是否混淆
            minifyEnabled true
            // 移除无用的资源文件,这个东西依赖于minifyEnabled，所以minifyEnabled也要为true才行
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"//这个名字貌似随便取，也可以有多个，总之一定要有..
    //解决多版本问题
    productFlavors {

        beauty {
            dimension "default"
            applicationId rootProject.ext.android.applicationId
            versionCode rootProject.ext.android.versionCode
            versionName rootProject.ext.android.versionName
            manifestPlaceholders = [BAIDU_LBS         : "",
                                    BAIDU_PUSH        : "",
                                    APP_PACKAGE_NAME  : "com.yonbor.mydicapp",
                                    JPUSH_APPKEY_VALUE: "",
                                    UMENG_APPKEY      : ""
            ]

            //***************************网络环境配置********************************//
            buildConfigField 'String', 'BASE_URL', '"https://app.bshcn.com.cn/"'
            buildConfigField 'String', 'HTTP_IMG_URL', '"http://image.bshcn.com.cn/upload/image/"'

            buildConfigField 'String', 'BASE_URL2', '"http://www.wanandroid.com/"'

        }
    }


    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    aaptOptions {
        aaptOptions.cruncherEnabled = false
        aaptOptions.useNewCruncher = false
    }

    /**
     * 使用gradle构建android的默认project结构
     * src/main
     ----java/
     ----res/
     ----assets/
     ----aidl/
     ----rs/
     ----jni/
     ----AndroidManifest.xml
     */
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }

        beauty {
            java.srcDirs = ['src/main/java', 'src/beauty/java']
            assets.srcDirs = ['src/main/assets']
            res.srcDirs = ['src/main/res', 'src/beauty/res']
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation project(':baselib')
    implementation rootProject.ext.dependencies["constraint-layout"]
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    implementation 'cat.ereza:customactivityoncrash:1.5.0' // Crash全局异常捕获
    implementation rootProject.ext.dependencies["arouter"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.google.zxing:android-core:3.3.0'
    // 饺子多媒体播放器
    implementation 'cn.jzvd:jiaozivideoplayer:6.2.12'
    // 视频边播放边缓存的代理策略
    implementation 'com.danikula:videocache:2.7.0'
    // Android智能下拉刷新框架-SmartRefreshLayout
    implementation rootProject.ext.dependencies["SmartRefreshLayout"]
    implementation rootProject.ext.dependencies["SmartRefreshHeader"] // 没有使用特殊Header，可以不加这行
    implementation rootProject.ext.dependencies["eventbus"]
    implementation 'com.hyman:flowlayout-lib:1.1.2'
    implementation rootProject.ext.dependencies["litepal"]
    implementation rootProject.ext.dependencies["gson"]
    implementation rootProject.ext.dependencies["matisse"]
}
